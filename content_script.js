// Generated by LiveScript 1.4.0
(function(){
  var textToHtml, sendBackground, simpleKeys, copy_clientrect_to_object, clientrect_to_object, getElemPath, stored_events, have_new_events, clear_stored_events, video_tag_to_object, iframe_to_object, get_all_iframes, get_all_video_tags, send_stored_events;
  textToHtml = function(str){
    var tmp;
    tmp = document.createElement('span');
    tmp.innerText = str;
    return tmp.innerHTML;
  };
  chrome.runtime.onMessage.addListener(function(req, sender, sendResponse){
    var type, data, permissions_list, fields, pagename, i$, len$, x, pagehtml;
    type = req.type, data = req.data;
    if (type === 'confirm_permissions') {
      permissions_list = [];
      fields = data.fields, pagename = data.pagename;
      for (i$ = 0, len$ = fields.length; i$ < len$; ++i$) {
        x = fields[i$];
        if (x.description != null) {
          permissions_list.push(x.description);
        } else {
          permissions_list.push(x.name);
        }
      }
      pagehtml = '';
      if (pagename != null) {
        pagehtml = '<b>(' + textToHtml(pagename) + ')</b>';
      }
      swal({
        title: 'This page needs your data',
        type: 'info',
        showCancelButton: true,
        allowEscapeKey: false,
        confirmButtonText: 'Approve',
        cancelButtonText: 'Deny',
        html: true,
        text: 'This page ' + pagehtml + ' wants to access the following data <a target="_blank" href="https://tmi.netlify.com/previewdata.html?fields=' + (function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = fields).length; i$ < len$; ++i$) {
            x = ref$[i$];
            results$.push(x.name);
          }
          return results$;
        }()).join(',') + '">(details)</a>:<br><br>' + permissions_list.join('<br>')
      }, function(accepted){
        return sendResponse(accepted);
      });
    }
    return true;
  });
  (function(){
    var ndiv;
    ndiv = document.createElement('div');
    ndiv.id = 'autosurvey_content_script_loaded';
    return document.body.appendChild(ndiv);
  })();
  console.log('content_script loaded');
  sendBackground = function(type, data, callback){
    return chrome.runtime.sendMessage({
      type: type,
      data: data
    }, function(response){
      if (callback != null) {
        return callback(response);
      }
    });
  };
  simpleKeys = function(original){
    var output, k, v, vt;
    output = {};
    for (k in original) {
      v = original[k];
      vt = typeof v;
      if (vt === 'number' || vt === 'string') {
        output[k] = v;
      }
    }
    return output;
  };
  copy_clientrect_to_object = function(rect, output){
    var i$, ref$, len$, x;
    for (i$ = 0, len$ = (ref$ = ['bottom', 'height', 'left', 'right', 'top', 'width']).length; i$ < len$; ++i$) {
      x = ref$[i$];
      output[x] = rect[x];
    }
  };
  clientrect_to_object = function(rect){
    var output, i$, ref$, len$, x;
    output = {};
    for (i$ = 0, len$ = (ref$ = ['bottom', 'height', 'left', 'right', 'top', 'width']).length; i$ < len$; ++i$) {
      x = ref$[i$];
      output[x] = rect[x];
    }
    return output;
  };
  getElemPath = function(elem){
    var output, eleminfo;
    output = [];
    while (elem !== null) {
      eleminfo = {
        id: elem.id,
        tag: elem.tagName,
        'class': elem.className
      };
      if (elem.getBoundingClientRect != null) {
        copy_clientrect_to_object(elem.getBoundingClientRect(), eleminfo);
      }
      output.push(eleminfo);
      elem = elem.parentNode;
    }
    return output;
  };
  stored_events = {
    'mousedown': [],
    'mouseup': [],
    'mousemove': [],
    'mousewheel': [],
    'keydown': [],
    'keyup': []
  };
  have_new_events = function(){
    var i$, ref$, len$, evtn;
    for (i$ = 0, len$ = (ref$ = ['mousedown', 'mouseup', 'mousemove', 'mousewheel', 'keydown', 'keyup']).length; i$ < len$; ++i$) {
      evtn = ref$[i$];
      if (stored_events[evtn].length > 0) {
        return true;
      }
    }
    return false;
  };
  clear_stored_events = function(){
    stored_events = {
      'mousedown': [],
      'mouseup': [],
      'mousemove': [],
      'mousewheel': [],
      'keydown': [],
      'keyup': []
    };
  };
  video_tag_to_object = function(vid){
    var output, i$, ref$, len$, attr;
    output = {};
    if (vid.getBoundingClientRect != null) {
      output.pos = clientrect_to_object(vid.getBoundingClientRect());
    }
    for (i$ = 0, len$ = (ref$ = ['width', 'height', 'playbackRate', 'paused', 'duration', 'ended', 'src', 'currentSrc', 'muted', 'currentTime', 'tagName', 'className', 'id']).length; i$ < len$; ++i$) {
      attr = ref$[i$];
      output[attr] = vid[attr];
    }
    return output;
  };
  iframe_to_object = function(iframe){
    var output, i$, ref$, len$, attr;
    output = {};
    if (iframe.getBoundingClientRect != null) {
      output.pos = clientrect_to_object(iframe.getBoundingClientRect());
    }
    for (i$ = 0, len$ = (ref$ = ['width', 'height', 'src', 'id', 'tagName', 'className']).length; i$ < len$; ++i$) {
      attr = ref$[i$];
      output[attr] = iframe[attr];
    }
    return output;
  };
  get_all_iframes = function(){
    var all_iframes, x;
    all_iframes = document.querySelectorAll('iframe');
    return (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = all_iframes).length; i$ < len$; ++i$) {
        x = ref$[i$];
        results$.push(iframe_to_object(x));
      }
      return results$;
    }());
  };
  get_all_video_tags = function(){
    var all_video_tags, x;
    all_video_tags = document.querySelectorAll('video');
    return (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = all_video_tags).length; i$ < len$; ++i$) {
        x = ref$[i$];
        results$.push(video_tag_to_object(x));
      }
      return results$;
    }());
  };
  send_stored_events = function(){
    var output;
    output = import$({
      windowwidth: document.documentElement.clientWidth,
      windowheight: document.documentElement.clientHeight,
      screenwidth: screen.width,
      screenheight: screen.height,
      location: window.location.href,
      scrollleft: document.body.scrollLeft,
      scrolltop: document.body.scrollTop,
      scrollwidth: document.body.scrollWidth,
      scrollheight: document.body.scrollHeight,
      pageheight: document.body.clientHeight,
      pagewidth: document.body.clientWidth,
      videos: get_all_video_tags(),
      iframes: get_all_iframes()
    }, stored_events);
    sendBackground('send_stored_events', output);
  };
  setInterval(function(){
    if (have_new_events()) {
      send_stored_events();
      clear_stored_events();
    }
  }, 1000);
  document.addEventListener('mousedown', function(evt){
    var output;
    output = simpleKeys(evt);
    output.target = getElemPath(evt.target);
    output.srcElement = getElemPath(evt.srcElement);
    stored_events.mousedown.push(output);
  });
  document.addEventListener('mousemove', function(evt){
    var output;
    output = simpleKeys(evt);
    stored_events.mousemove.push(output);
  });
  document.addEventListener('mousewheel', function(evt){
    var output;
    output = simpleKeys(evt);
    stored_events.mousewheel.push(output);
  });
  document.addEventListener('keydown', function(evt){
    var output;
    output = {
      timeStamp: evt.timeStamp,
      target: getElemPath(evt.target),
      srcElement: getElemPath(evt.srcElement)
    };
    stored_events.keydown.push(output);
  });
  document.addEventListener('keyup', function(evt, obj){
    var output;
    output = {
      timeStamp: evt.timeStamp,
      target: getElemPath(evt.target),
      srcElement: getElemPath(evt.srcElement)
    };
    stored_events.keyup.push(output);
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
